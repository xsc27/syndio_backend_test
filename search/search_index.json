{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Syndio Backend Test \u00b6 Demo an API with data read from a sqlite. Usage \u00b6 pip install git+https://github.com/xsc27/syndio_backend_test.git export PORT = 8000 # Optional: defaults to 5000 python3 -m syndio_backend_test # Start web server curl http://127.0.0.1: ${ PORT } /employees/ | jq . License \u00b6 Copyright 2021 Carlos Meza Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Home"},{"location":"index.html#syndio-backend-test","text":"Demo an API with data read from a sqlite.","title":"Syndio Backend Test"},{"location":"index.html#usage","text":"pip install git+https://github.com/xsc27/syndio_backend_test.git export PORT = 8000 # Optional: defaults to 5000 python3 -m syndio_backend_test # Start web server curl http://127.0.0.1: ${ PORT } /employees/ | jq .","title":"Usage"},{"location":"index.html#license","text":"Copyright 2021 Carlos Meza Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"reference/index.html","text":"__init__ __main__ api main sql","title":"Reference"},{"location":"reference/__init__.html","text":"","title":"  init  "},{"location":"reference/__main__.html","text":"Module entrypoint.","title":"  main  "},{"location":"reference/api.html","text":"OpenAPI. API \u00b6 read_employees () \u00b6 Get employees. Source code in syndio_backend_test/api.py @API . get ( \"/employees\" ) @API . get ( \"/employees/\" ) def read_employees (): \"\"\"Get employees.\"\"\" return list ( sql . get_rows ( sql . get_db_conn (), \"employees\" )) read_root () \u00b6 Display status. Source code in syndio_backend_test/api.py @API . get ( \"/\" ) def read_root (): \"\"\"Display status.\"\"\" return { \"status\" : \"up\" }","title":"Api"},{"location":"reference/api.html#syndio_backend_test.api.API","text":"","title":"API"},{"location":"reference/api.html#syndio_backend_test.api.read_employees","text":"Get employees. Source code in syndio_backend_test/api.py @API . get ( \"/employees\" ) @API . get ( \"/employees/\" ) def read_employees (): \"\"\"Get employees.\"\"\" return list ( sql . get_rows ( sql . get_db_conn (), \"employees\" ))","title":"read_employees()"},{"location":"reference/api.html#syndio_backend_test.api.read_root","text":"Display status. Source code in syndio_backend_test/api.py @API . get ( \"/\" ) def read_root (): \"\"\"Display status.\"\"\" return { \"status\" : \"up\" }","title":"read_root()"},{"location":"reference/main.html","text":"Starts web application. main () \u00b6 Start web application. Source code in syndio_backend_test/main.py def main (): \"\"\"Start web application.\"\"\" host = os . environ . get ( \"HOST\" ) if not host : host = \"0.0.0.0\" if os . getenv ( \"DYNO\" ) else \"127.0.0.1\" # noqa: S104 port = os . getenv ( \"PORT\" , \"\" ) port = int ( port ) if port . isdigit () else 5000 uvicorn . run ( \"syndio_backend_test.api:API\" , host = host , port = port , log_level = \"info\" )","title":"Main"},{"location":"reference/main.html#syndio_backend_test.main.main","text":"Start web application. Source code in syndio_backend_test/main.py def main (): \"\"\"Start web application.\"\"\" host = os . environ . get ( \"HOST\" ) if not host : host = \"0.0.0.0\" if os . getenv ( \"DYNO\" ) else \"127.0.0.1\" # noqa: S104 port = os . getenv ( \"PORT\" , \"\" ) port = int ( port ) if port . isdigit () else 5000 uvicorn . run ( \"syndio_backend_test.api:API\" , host = host , port = port , log_level = \"info\" )","title":"main()"},{"location":"reference/sql.html","text":"Database interface. get_db_conn () -> < built - in function connect > \u00b6 Return connection to database. Source code in syndio_backend_test/sql.py def get_db_conn () -> sqlite3 . connect : \"\"\"Return connection to database.\"\"\" con = sqlite3 . connect ( _get_db ()) con . row_factory = sqlite3 . Row atexit . register ( _close_db , con ) return con get_rows ( connection : < built - in function connect > , row : str ) -> Iterator \u00b6 Return iterator of rows as key values. Source code in syndio_backend_test/sql.py def get_rows ( connection : sqlite3 . connect , row : str ) -> Iterator : \"\"\"Return iterator of rows as key values.\"\"\" cmd = f \"SELECT * FROM { row } \" # noqa: S608 logging . debug ( f \"Executing ` { cmd } `\" ) data = connection . execute ( cmd ) return ( dict ( zip ( row . keys (), row )) for row in data )","title":"Sql"},{"location":"reference/sql.html#syndio_backend_test.sql.get_db_conn","text":"Return connection to database. Source code in syndio_backend_test/sql.py def get_db_conn () -> sqlite3 . connect : \"\"\"Return connection to database.\"\"\" con = sqlite3 . connect ( _get_db ()) con . row_factory = sqlite3 . Row atexit . register ( _close_db , con ) return con","title":"get_db_conn()"},{"location":"reference/sql.html#syndio_backend_test.sql.get_rows","text":"Return iterator of rows as key values. Source code in syndio_backend_test/sql.py def get_rows ( connection : sqlite3 . connect , row : str ) -> Iterator : \"\"\"Return iterator of rows as key values.\"\"\" cmd = f \"SELECT * FROM { row } \" # noqa: S608 logging . debug ( f \"Executing ` { cmd } `\" ) data = connection . execute ( cmd ) return ( dict ( zip ( row . keys (), row )) for row in data )","title":"get_rows()"}]}